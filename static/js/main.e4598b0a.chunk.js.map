{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","data","setData","fetch","window","location","origin","then","res","status","json","className","margin","top","right","bottom","left","xScale","type","format","precision","xFormat","axisLeft","legend","legendPosition","legendOffset","axisBottom","tickValues","colors","scheme","borderColor","from","curve","enableArea","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MA6EeA,MA1Ef,WAAgB,IAAD,EACUC,WAAe,IADzB,mBACNC,EADM,KACDC,EADC,KAQb,OANAF,aAAgB,WACdG,MAAM,GAAD,OAAIC,OAAOC,SAASC,OAApB,gBAAyCC,MAC5C,SAAAC,GAAG,OAAiB,MAAfA,EAAIC,QAAkBD,EAAIE,UAAQH,MACrC,SAAAN,GAAI,OAAEC,EAAQD,EAAKA,WAEvB,IAEA,+BACE,qBAAKU,UAAU,eAAf,SACE,cAAC,IAAD,CACEC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDf,KAAMA,EACNgB,OAAQ,CACNC,KAAM,OACNC,OAAQ,oBACRC,UAAW,UAEbC,QAAQ,yBACRC,SAAU,CACRC,OAAQ,QACRC,eAAgB,SAChBC,cAAe,IAEjBC,WAAY,CACVP,OAAQ,YACRQ,WAAY,EACZJ,OAAQ,OACRC,eAAgB,SAChBC,aAAc,IAEhBG,OAAQ,CAAEC,OAAQ,QAClBC,YAAa,CAAEC,KAAM,SACrBC,MAAM,SACNC,WAAW,OACXC,UAAW,GACXC,WAAY,CAAEC,MAAO,cACrBC,iBAAkB,EAClBC,iBAAkB,CAAEP,KAAM,cAC1BQ,mBAAoB,GACpBC,SAAS,EACTC,QAAS,CACP,CACEC,OAAQ,eACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,GACXC,WAAY,GACZC,YAAa,IACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACP,CACEC,GAAI,QACJC,MAAO,CACLC,eAAgB,qBAChBP,YAAa,cCrDlBQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtD,MAAK,YAAkD,IAA/CuD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e4598b0a.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { ResponsiveLine } from \"@nivo/line\";\nimport './style.css';\nfunction App() {\n  const [data,setData] = React.useState([])\n  React.useEffect(()=>{\n    fetch(`${window.location.origin}/chart-data`).then(\n      res=>res.status === 200 && res.json()).then(\n        data=>setData(data.data)\n      )\n  },[])\n  return (\n    <main>\n      <div className=\"chartWrapper\">\n        <ResponsiveLine\n          margin={{ top: 64, right: 128, bottom: 64, left: 64 }}\n          data={data}\n          xScale={{\n            type: \"time\",\n            format: \"%Y-%m-%d %H:%M:%S\",\n            precision: \"minute\",\n          }}\n          xFormat=\"time:%Y-%m-%d %H:%M:%S\"\n          axisLeft={{\n            legend: \"Speed\",\n            legendPosition: \"middle\",\n            legendOffset: -56,\n          }}\n          axisBottom={{\n            format: \"%b %d '%y\",\n            tickValues: 8,\n            legend: \"Date\",\n            legendPosition: \"middle\",\n            legendOffset: 56,\n          }}\n          colors={{ scheme: \"nivo\" }}\n          borderColor={{ from: \"color\" }}\n          curve=\"linear\"\n          enableArea=\"true\"\n          pointSize={10}\n          pointColor={{ theme: \"background\" }}\n          pointBorderWidth={2}\n          pointBorderColor={{ from: \"serieColor\" }}\n          pointLabelYOffset={-12}\n          useMesh={true}\n          legends={[\n            {\n              anchor: \"bottom-right\",\n              direction: \"column\",\n              justify: false,\n              translateX: 100,\n              translateY: 0,\n              itemsSpacing: 0,\n              itemDirection: \"left-to-right\",\n              itemWidth: 80,\n              itemHeight: 20,\n              itemOpacity: 0.75,\n              symbolSize: 12,\n              symbolShape: \"circle\",\n              symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n              effects: [\n                {\n                  on: \"hover\",\n                  style: {\n                    itemBackground: \"rgba(0, 0, 0, .03)\",\n                    itemOpacity: 1,\n                  },\n                },\n              ],\n            },\n          ]}\n        />\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}